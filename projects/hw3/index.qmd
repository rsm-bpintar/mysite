---
title: "Multinomial Logit Model"
author: "Brian Pintar"
date: today
---


This assignment explores two methods for estimating the MNL model: (1) via Maximum Likelihood, and (2) via a Bayesian approach using a Metropolis-Hastings MCMC algorithm. 


## 1. Likelihood for the Multi-nomial Logit (MNL) Model

Suppose we have $i=1,\ldots,n$ consumers who each select exactly one product $j$ from a set of $J$ products. The outcome variable is the identity of the product chosen $y_i \in \{1, \ldots, J\}$ or equivalently a vector of $J-1$ zeros and $1$ one, where the $1$ indicates the selected product. For example, if the third product was chosen out of 3 products, then either $y=3$ or $y=(0,0,1)$ depending on how we want to represent it. Suppose also that we have a vector of data on each product $x_j$ (eg, brand, price, etc.). 

We model the consumer's decision as the selection of the product that provides the most utility, and we'll specify the utility function as a linear function of the product characteristics:

$$ U_{ij} = x_j'\beta + \epsilon_{ij} $$

where $\epsilon_{ij}$ is an i.i.d. extreme value error term. 

The choice of the i.i.d. extreme value error term leads to a closed-form expression for the probability that consumer $i$ chooses product $j$:

$$ \mathbb{P}_i(j) = \frac{e^{x_j'\beta}}{\sum_{k=1}^Je^{x_k'\beta}} $$

For example, if there are 3 products, the probability that consumer $i$ chooses product 3 is:

$$ \mathbb{P}_i(3) = \frac{e^{x_3'\beta}}{e^{x_1'\beta} + e^{x_2'\beta} + e^{x_3'\beta}} $$

A clever way to write the individual likelihood function for consumer $i$ is the product of the $J$ probabilities, each raised to the power of an indicator variable ($\delta_{ij}$) that indicates the chosen product:

$$ L_i(\beta) = \prod_{j=1}^J \mathbb{P}_i(j)^{\delta_{ij}} = \mathbb{P}_i(1)^{\delta_{i1}} \times \ldots \times \mathbb{P}_i(J)^{\delta_{iJ}}$$

Notice that if the consumer selected product $j=3$, then $\delta_{i3}=1$ while $\delta_{i1}=\delta_{i2}=0$ and the likelihood is:

$$ L_i(\beta) = \mathbb{P}_i(1)^0 \times \mathbb{P}_i(2)^0 \times \mathbb{P}_i(3)^1 = \mathbb{P}_i(3) = \frac{e^{x_3'\beta}}{\sum_{k=1}^3e^{x_k'\beta}} $$

The joint likelihood (across all consumers) is the product of the $n$ individual likelihoods:

$$ L_n(\beta) = \prod_{i=1}^n L_i(\beta) = \prod_{i=1}^n \prod_{j=1}^J \mathbb{P}_i(j)^{\delta_{ij}} $$

And the joint log-likelihood function is:

$$ \ell_n(\beta) = \sum_{i=1}^n \sum_{j=1}^J \delta_{ij} \log(\mathbb{P}_i(j)) $$



## 2. Simulate Conjoint Data

We will simulate data from a conjoint experiment about video content streaming services. We elect to simulate 100 respondents, each completing 10 choice tasks, where they choose from three alternatives per task. For simplicity, there is not a "no choice" option; each simulated respondent must select one of the 3 alternatives. 

Each alternative is a hypothetical streaming offer consistent of three attributes: (1) brand is either Netflix, Amazon Prime, or Hulu; (2) ads can either be part of the experience, or it can be ad-free, and (3) price per month ranges from \$4 to \$32 in increments of \$4.

The part-worths (ie, preference weights or beta parameters) for the attribute levels will be 1.0 for Netflix, 0.5 for Amazon Prime (with 0 for Hulu as the reference brand); -0.8 for included adverstisements (0 for ad-free); and -0.1*price so that utility to consumer $i$ for hypothethical streaming service $j$ is 

$$
u_{ij} = (1 \times Netflix_j) + (0.5 \times Prime_j) + (-0.8*Ads_j) - 0.1\times Price_j + \varepsilon_{ij}
$$

where the variables are binary indicators and $\varepsilon$ is Type 1 Extreme Value (ie, Gumble) distributed.

The following code provides the simulation of the conjoint data.

:::: {.callout-note collapse="true"}
```{python}
import numpy as np
import pandas as pd
from itertools import product

# Set random seed for reproducibility
np.random.seed(123)

# 1. Define attribute levels
brands = ['N', 'P', 'H']  # Netflix, Prime, Hulu
ads = ['Yes', 'No']
prices = np.arange(8, 33, 4)  # $8 to $32

# 2. Generate all possible profiles
profiles = pd.DataFrame(list(product(brands, ads, prices)), columns=['brand', 'ad', 'price'])

# 3. Define utility weights
brand_util = {'N': 1.0, 'P': 0.5, 'H': 0.0}
ad_util = {'Yes': -0.8, 'No': 0.0}
price_util = lambda p: -0.1 * p

# 4. Simulation parameters
n_respondents = 100
n_tasks = 10
n_alts = 3

# 5. Simulate choice tasks for each respondent
simulated_data = []

for respondent_id in range(1, n_respondents + 1):
    for task_id in range(1, n_tasks + 1):
        sampled_profiles = profiles.sample(n=n_alts).reset_index(drop=True)
        sampled_profiles['brand_util'] = sampled_profiles['brand'].map(brand_util)
        sampled_profiles['ad_util'] = sampled_profiles['ad'].map(ad_util)
        sampled_profiles['price_util'] = sampled_profiles['price'].apply(price_util)
        
        # Compute deterministic utility
        sampled_profiles['utility'] = (
            sampled_profiles['brand_util'] +
            sampled_profiles['ad_util'] +
            sampled_profiles['price_util']
        )
        
        # Add Gumbel noise
        gumbel_noise = np.random.gumbel(loc=0, scale=1, size=n_alts)
        sampled_profiles['total_utility'] = sampled_profiles['utility'] + gumbel_noise

        # Determine choice (1 if max utility, else 0)
        choice_index = sampled_profiles['total_utility'].idxmax()
        sampled_profiles['choice'] = 0
        sampled_profiles.loc[choice_index, 'choice'] = 1

        # Add metadata
        sampled_profiles['respondent'] = respondent_id
        sampled_profiles['task'] = task_id

        simulated_data.append(sampled_profiles)

# Combine into a single DataFrame
df_simulated = pd.concat(simulated_data, ignore_index=True)
```
::::



## 3. Preparing the Data for Estimation

The "hard part" of the MNL likelihood function is organizing the data, as we need to keep track of 3 dimensions (consumer $i$, covariate $k$, and product $j$) instead of the typical 2 dimensions for cross-sectional regression models (consumer $i$ and covariate $k$). The fact that each task for each respondent has the same number of alternatives (3) helps.  In addition, we need to convert the categorical variables for brand and ads into binary variables.

_todo: reshape and prep the data_

:::: {.callout-note collapse="true"}
```{python}
# One-hot encode brand and ad (drop the reference levels: brand_H and ad_No)
df_design = pd.get_dummies(df_simulated, columns=['brand', 'ad'], drop_first=True)

# Keep only relevant columns for X matrix
X_columns = ['brand_N', 'brand_P', 'ad_Yes', 'price']
X = df_design[X_columns]

# Outcome variable: 1 if alternative was chosen, 0 otherwise
y = df_design['choice'].values

# Also store respondent and task IDs for future grouping if needed
respondent_ids = df_design['respondent'].values
task_ids = df_design['task'].values

# Show a preview of the prepared design matrix
df_prepared = df_design[['respondent', 'task'] + X_columns + ['choice']]
```
::::

## 4. Estimation via Maximum Likelihood

_todo: Code up the log-likelihood function._

_todo: Use `optim()` in R or `scipy.optimize()` in Python to find the MLEs for the 4 parameters ($\beta_\text{netflix}$, $\beta_\text{prime}$, $\beta_\text{ads}$, $\beta_\text{price}$), as well as their standard errors (from the Hessian). For each parameter construct a 95% confidence interval._

To estimate the part-worth parameters of the multinomial logit model, we define the log-likelihood function based on the softmax probability formulation. Each respondent's utility for each alternative is calculated as a linear function of the attributes (brand, ad presence, and price). We then maximize the log-likelihood using `scipy.optimize.minimize()` with the BFGS algorithm.

The estimated coefficients correspond to:
- $\beta_{\text{netflix}}$: preference for Netflix (vs. Hulu)
- $\beta_{\text{prime}}$: preference for Prime (vs. Hulu)
- $\beta_{\text{ads}}$: penalty for ad-included options (vs. ad-free)
- $\beta_{\text{price}}$: marginal disutility per dollar

We also compute standard errors from the inverse Hessian matrix and report 95% confidence intervals for each parameter estimate.

:::: {.callout-note collapse="true"}
```{python}
# Re-import necessary packages after code execution state reset
import numpy as np
import pandas as pd
from scipy.optimize import minimize

# Ensure X and y are NumPy arrays
X = df_design[['brand_N', 'brand_P', 'ad_Yes', 'price']].to_numpy(dtype=np.float64)
y = df_design['choice'].to_numpy(dtype=np.int64)

# Reshape y into (n_tasks, 3)
y_matrix = y.reshape((-1, 3))
n_tasks_total = y_matrix.shape[0]

# Define negative log-likelihood for MNL
def neg_log_likelihood(beta):
    beta = np.asarray(beta, dtype=np.float64)
    utilities = X @ beta
    utilities = utilities.reshape((-1, 3))
    exp_utils = np.exp(utilities)
    probs = exp_utils / np.sum(exp_utils, axis=1, keepdims=True)
    chosen_probs = probs[np.arange(n_tasks_total), y_matrix.argmax(axis=1)]
    return -np.sum(np.log(chosen_probs))

# Initial guess
beta_init = np.zeros(X.shape[1])

# Minimize the negative log-likelihood
result = minimize(neg_log_likelihood, beta_init, method='BFGS')

# Extract estimates and standard errors
beta_hat = result.x
hessian_inv = result.hess_inv
std_errors = np.sqrt(np.diag(hessian_inv))
z = 1.96

# Confidence intervals
conf_int = np.column_stack([
    beta_hat - z * std_errors,
    beta_hat + z * std_errors
])

# Package results
param_names = ['brand_N', 'brand_P', 'ad_Yes', 'price']
results_df = pd.DataFrame({
    'Parameter': param_names,
    'Estimate': beta_hat,
    'Std. Error': std_errors,
    'CI Lower (95%)': conf_int[:, 0],
    'CI Upper (95%)': conf_int[:, 1]
})

results_df
```
::::

The table above reports the estimated part-worth utilities for each attribute level in the multinomial logit (MNL) model. All four coefficients are statistically significant at the 95% confidence level, as none of their confidence intervals include zero. The signs and magnitudes of the estimates align with economic intuition and the true values used in the simulation.

Brand Preferences: Consumers exhibit a strong preference for Netflix over Hulu (baseline), with an estimated utility gain of approximately 0.98 units. Amazon Prime is also preferred over Hulu, though to a lesser degree (0.43 units). These estimates closely match the simulated values of 1.0 and 0.5, respectively.

Advertising: The presence of advertisements decreases the utility of a streaming offer by about 0.73 units. This negative effect is in line with the simulated disutility of -0.8 and indicates that consumers have a strong preference for ad-free experiences.

Price Sensitivity: Each additional dollar in monthly price reduces utility by approximately 0.11 units. This estimate is tightly bounded and very close to the simulated effect of -0.1, suggesting that the model has successfully captured consumers' price sensitivity.

Overall, the MNL model recovers the true preference structure well, validating both the simulation setup and the estimation procedure.

## 5. Estimation via Bayesian Methods

_todo: code up a metropolis-hasting MCMC sampler of the posterior distribution. Take 11,000 steps and throw away the first 1,000, retaining the subsequent 10,000._

_hint: Use N(0,5) priors for the betas on the binary variables, and a N(0,1) prior for the price beta._

_hint: instead of calculating post=lik*prior, you can work in the log-space and calculate log-post = log-lik + log-prior (this should enable you to re-use your log-likelihood function from the MLE section just above)_

_hint: King Markov (in the video) use a candidate distribution of a coin flip to decide whether to move left or right among his islands.  Unlike King Markov, we have 4 dimensions (because we have 4 betas) and our dimensions are continuous.  So, use a multivariate normal distribution to pospose the next location for the algorithm to move to. I recommend a MNV(mu, Sigma) where mu=c(0,0,0,0) and sigma has diagonal values c(0.05, 0.05, 0.05, 0.005) and zeros on the off-diagonal.  Since this MVN has no covariances, you can sample each dimension independently (so 4 univariate normals instead of 1 multivariate normal), where the first 3 univariate normals are N(0,0.05) and the last one if N(0,0.005)._


_todo: for at least one of the 4 parameters, show the trace plot of the algorithm, as well as the histogram of the posterior distribution._

_todo: report the 4 posterior means, standard deviations, and 95% credible intervals and compare them to your results from the Maximum Likelihood approach._



## 6. Discussion

_todo: Suppose you did not simulate the data. What do you observe about the parameter estimates? What does $\beta_\text{Netflix} > \beta_\text{Prime}$ mean? Does it make sense that $\beta_\text{price}$ is negative?_

_todo: At a high level, discuss what change you would need to make in order to simulate data from --- and estimate the parameters of --- a multi-level (aka random-parameter or hierarchical) model. This is the model we use to analyze "real world" conjoint data._











